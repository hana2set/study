자카르타 
https://www.samsungsds.com/kr/insights/java_jakarta.html
https://ko.wikipedia.org/wiki/%EC%9E%90%EC%B9%B4%EB%A5%B4%ED%83%80_EE

Spring HATEOAS 



# SpringData 기능 목록

- 강력한 리포지토리 및 사용자 지정 객체 매핑 추상화
- 리포지토리 메서드 이름에서 동적 쿼리 파생
- 기본 속성을 제공하는 구현 도메인 기본 클래스
- 명료한 추적기능 지원(생성일시, 마지막 변경일시, 생성자, 마지막 변경자)
- 사용자 지정 리포지토리 코드 통합 가능성
- JavaConfig 및 사용자 지정 XML 네임스페이스를 통한 간편한 Spring 통합
- Spring MVC 컨트롤러와의 고급 통합
- 교차 스토어 지속성에 대한 실험적 지원



spring_data_jparepository.png

# SpringData Jpa 와 JpaRepository

- Repository 는 MarkerInterface 로 특별한 기능은 없음
- Repository ~ JpaRepository 사이는 `**@NoRepositoryBean**` 이 붙어있는 인터페이스
    - JpaRepository<Entity,ID> 붙이면 알맞은 프로그래밍 된 `**SimpleJpaReository**` 구현체 빈이 등록된다.
        - 어떻게? `**@SpringBootApplication**` 을 통해 자동으로 붙여지는 `**@EnableJpaRepositories**` 의 **JpaRepositoriesRegistrar** 를 통해서 등록된다.
            - **JpaRepositoriesRegistrar 는 ImportBeanDefinitionRegistrar** 의 구현체이다
            - **ImportBeanDefinitionRegistrar** 는 프로그래밍을 통해 빈을 주입해준다.
- SpringDataJpa 에 의해 엔티티의 CRUD, 페이징, 정렬 기능 메소드들을 가진 빈이 등록된다. (상위 인터페이스들의 기능)

- JpaRepositoriesRegistrar 구현 예제
```java
public class MyRepositoryRegistrar implements ImportBeanDefinitionRegistrar {

  @Override
  public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,
      BeanDefinitionRegistry registry) {

    GenericBeanDefinition beanDefinition = new GenericBeanDefinition();
    beanDefinition.setBeanClass(MyRepository.class);
    beanDefinition.getPropertyValues().add("dataTable", Map.of(1L, "data"));

    registry.registerBeanDefinition("myRepository", beanDefinition);
  }
}
​
// TestApplication.java
@Import(MyRepositoryRegistrar.class)
@SpringBootTest
public class MyRepositoryTest {

  @Autowired
  MyRepository myRepository; //위에 등록한 빈 "myRepository"가 호출됨

  @Test
  void myRepositoryTest() {
    // given
    var newData = "NEW DATA";
    var savedId = myRepository.save(newData);

    // when
    var newDataList = myRepository.find(savedId);

    // then
    System.out.println(newDataList);
  }
}
```



# Repository 기능을 제한하기

## 1. `**@RepositoryDefinition**` 을 인터페이스에 붙이는법 (가장 많이 쓰임)

- BeanDefinition 에 직접 접근하여 프로그래밍으로 주입받을 구현체 메소드들을 지정해서 요청
```java
@RepositoryDefinition(domainClass = Comment.class, idClass = Long.class)
public interface CommentRepository {

    Comment save(Comment comment);

    List<Comment> findAll();
    
}
```

## 2. `**@NoRepositoryBean**`  인터페이스로 한번더 감싸는법

- @NoRepositoryBean: 실제 사용되는 Repository가 아님을 표시 (빈 등록 방지)
- 상위 인터페이스 개념을 하나 더 만들어서 열어줄 메소드만 선언


```java
@NoRepositoryBean //Repository를 상속받지만 기능은 상속받지않음.
public interface MyRepository<T, ID extends Serializable> extends Repository<T, ID> {

    <E extends T> E save(E entity);

    List<T> findAll();

}

/// 상속해서 사용 (위 save, findAll)
public interface UserRepository extends MyRepository<User, Long> {

}
```

# Repository 에 기능 추가

- 추가할 빈 Repository 인터페이스
```java
public interface MyRepository<T> {

    void delete(T entity);

    List<String> findNameAll();
}

public interface UserRepository extends JpaRepository<User, Long>, MyRepository<User> {

}
```
```java
// 구현체
@Repository
@Transactional
public class MyRepositoryImpl implements MyRepository<User> {

	@Autowired
	EntityManager entityManager;

    // 1. delete 쿼리가 바로 날아가도록 기능을 개선
    // - 기본 delete 메소드는 remove 전에 영속성 전이(Cascade, orphanRemoval)등을 위해 조회를 먼저 함 (오래걸림)
	@Override
	public void delete(User user) {
		entityManager.remove(user);
    }

    //  2. findAll 할때 이름만 가져오도록 기능을 추가
	@Override
	public List<String> findNameAll() {
        return entityManager.createQuery("SELECT u.username FROM User AS u", String.class).getResultList();
    }

}
```


# JPA 페이징

# 페이징 레파지토리
- JpaRepository 의존성
    - ListPagingAndSortingRepository
        - PagingAndSortingRepository <- Paging & Sort 기능

# 페이징 처리 프로세스

1. PageRequest 를 사용하여 Pageable에 페이징 정보를 담아 객체화 한다.
2. Pageable을 JpaRepository가 상속된 인터페이스의 메서드에 `T`(Entity)와 함꼐 파라미터로 전달한다.
3. 2번의 메서드의 return 으로 Page<`T`>가 응답 된다.
4. 응답된 Page<`T`>에 담겨진 Page 정보를 바탕으로 로직을 처리하면 된다.

# 페이징 요청/응답 클래스

## Pageable

- 요청 : `org.springframework.data.domain.Pageable`
    ```java
    PageRequest.of(int page, int size) : 0부터 시작하는 페이지 번호와 개수. 정렬이 지정되지 않음
    PageRequest.of(int page, int size, Sort sort) : 페이지 번호와 개수, 정렬 관련 정보
    PageRequest.of(int page int size, Sort sort, Direction direction, String ... props) : 0부터 시작하는 페이지 번호와 개수, 정렬의 방향과 정렬 기준 필드들
    ```
    
    - 메서드    
    ```java
    pageable.getTotalPages() : 총 페이지 수
    pageable.getTotalElements() : 전체 개수
    pageable.getNumber() : 현재 페이지 번호
    pageable.getSize() : 페이지 당 데이터 개수
    pageable.hasnext() : 다음 페이지 존재 여부
    pageable.isFirst() : 시작페이지 여부
    pageable.getContent(), PageRequest.get() : 실제 컨텐츠를 가지고 오는 메서드. getContext는 List<Entity> 반환, get()은 Stream<Entity> 반환
    ```
        
- 응답 : `org.springframework.data.domain.Page`
    - 페이징 findAll() 의 기본적인 반환 타입
    ```java
    {
        "content": [
            {"id": 1, "username": "User 0", "address": "Korea", "age": 0},
            ...
            {"id": 5, "username": "User 4", "address": "Korea", "age": 4}
        ],
        "pageable": {
            "sort": {
                "sorted": false, // 정렬 상태
                "unsorted": true,
                "empty": true
            },
            "pageSize": 5, // 페이지 크기
            "pageNumber": 0, // 페이지 번호 (0번 부터 시작)
            "offset": 0, // 해당 페이지의 첫번째 요소의 전체 순번 (다음 페이지에서는 5)
            "paged": true,
            "unpaged": false
        },
        "totalPages": 20, // 페이지로 제공되는 총 페이지 수
        "totalElements": 100, // 모든 페이지에 존재하는 총 원소 수
        "last": false,  // 마지막 페이지 여부
        "number": 0,
        "sort": {
            "sorted": false,    // 정렬 사용 여부
            "unsorted": true,
            "empty": true
        },
        "size": 5,       // Contents 사이즈
        "numberOfElements": 5,  // Contents 의 원소 수
        "first": true,   // 첫페이지 여부
        "empty": false   // 공백 여부
    }
    ```

# 반환 타입

## Page<T> 타입
- **게시판 형태의 페이징**에서 사용된다.
- 전체 요소 갯수도 함께 조회한다. (`totalElements`)
- 형식 위 참조

## **Slice<T> 타입**
- 더보기 형태의 페이징에서 사용된다.
- 전체 요소 갯수 대신 `offset` 필드로 조회할 수 있다.
    - 따라서 count 쿼리가 발생되지 않고 limit+1 조회를 한다. (offset 은 성능 안좋음)
```java
{
    "content": [
        { "id": 13, "username": "User 12", "address": "Korea", "age": 12 },
        ...
        { "id": 16, "username": "User 15", "address": "Korea", "age": 15 }
    ],
    "pageable": {
        "sort": { "sorted": false, "unsorted": true, "empty": true },
        "pageNumber": 3,
        "pageSize": 4,
        "offset": 12,
        "paged": true,
        "unpaged": false
    },
    "number": 3,
    "numberOfElements": 4,
    "first": false,
    "last": false,
    "size": 4,
    "sort": { "sorted": false, "unsorted": true, "empty": true },
    "empty": false
}
```

## **List<T> 타입**

- 전체 목록보기 형태의 페이징에서 사용된다.
- 기본 타입으로 **count 조회가 발생하지 않는다** (성능 향상)

# 정렬

### 컬럼 값으로 정렬
- Sort 클래스 사용
    ```java
    Sort sort1 = Sort.by("name").descending();     // 내림차순
    Sort sort2 = Sort.by("password").ascending();  // 오름차순
    Sort sortAll = sort1.and(sort2);      // 2개이상 다중정렬
    Pageable pageable = PageRequest.of(0, 10, sortAll);  // pageable 생성시 추가
    ```    

### 컬럼이 아닌값으로 정렬

- @Query 사용시 Alias(쿼리에서 as 로 지정한 문구) 를 기준으로 정렬할 수 있다.
    ```java
    // 아래와 같이 AS user_password 로 Alias(AS) 를 걸어주면
    @Query("SELECT u, u.password AS user_password FROM user u WHERE u.username = ?1")
    List<User> findByUsername(String username, Sort sort);
    ```
    
    ```java
    // 이렇게 해당 user_password 를 기준으로 정렬 가능
    List<User> users = findByUsername("user", Sort.by("user_password"));
    ```
        

### SQL 함수를 사용해서 정렬하기

- JpaSort 를 사용해서 쿼리 함수를 기준으로 정렬할 수 있다.
    ```java
    // 아래와 같이 일반적인 쿼리에서
    @Query("SELECT u FROM user u WHERE u.username = ?1") // 이건 없어도됨
    List<User> findByUsername(String username, Sort sort);
    ```
    
    ```java
    // 이렇게 쿼리함수 LENGTH() 조건을 걸어서 password 문자길이 기준으로 정렬 가능
    List<User> users = findByUsername("user", JpaSort.unsafe("LENGTH(password)"));
    ```

# 페이징 & 정렬 팁

## 1. List<T>가 필요하면 응답을 Page<T>로 받지말고 List<T> 로 받기
- Page<T>는 전체 count 쿼리가 추가로 발생함

## 2. Pageable 과 실제 페이지사이의 -1 문제 해결하기

- -1 처리를 중복으로 해줘야하는 이슈
- PageDTO 를 만들어서 toPageable() 메소드를 사용해보자
    
    ```java
    public class PageDTO {
      @Positive // 0보다 큰수
      private Integer currentPage;
      private Integer size;
      private String sortBy;
    
      public Pageable toPageable() {
        return PageRequest.of(currentPage-1, size, Sort.by(sortBy).descending());
      }
    }
    ```
    
    ```java
    // UserService 일부
    public List<User> findAll(PageDTO pageDTO){
    	return userRepository.findUsers(pageDTO.toPageable());
    }
    ```

## 3. Pageable 을 GET API의 요청필드로 받아오기

```java
@GetMapping("/users")
public Page<User> getAllUsers(Pageable pageable) {
    return userRepository.findAll(pageable);
}
```

- `http://localhost:8080/users?page=0`
    - 0번 페이지 부터 20개(default) 조회한다.
- `http://localhost:8080/users?page=0&size=5`
    - 0번 페이지부터 5개 조회한다.
- `http://localhost:8080/users?page=0&size=5&sort=id.desc`
    - 0번 페이지부터 5개 조회 하는데, id 의 역순으로 조회한다.





---


# JPA Auditing

## Auditing 적용 방법
1. 메인 애플리케이션 위에 @EnableJpaAuditing 추가
    ```java
    @EnableJpaAuditing
    @SpringBootApplication
    public class Application {
    ```​
2. 엔티티 클래스 위에 @EntityListeners(AuditingEntityListener.class) 추가
    ```java
    @Getter
    @MappedSuperclass
    @EntityListeners(AuditingEntityListener.class)
    public class TimeStamp {
        @CreatedDate
        private LocalDateTime createdAt;

        @CreatedBy
        @ManyToOne
        private User createdBy;

        @LastModifiedDate
        private LocalDateTime modifiedAt;

        @LastModifiedBy
        @ManyToOne
        private User modifiedBy;
    }
    ```


<details>
  <summary>직접 구현해보기</summary>
  
## Auditing 
- 생성일시, 생성자, 수정일시, 수정자는 결국 엔티티의 영속성이 변경될때 저장한다.
- 엔티티의 영속성이 변경되는 `생성 > 수정 > 삭제`  이 흐름을 엔티티 라이프 사이클 이벤트라고 한다.
- Auditing 도 이러한 엔티티의 라이프 사이클 이벤트를 통해 구현하고있다.
- `@PrePersist`, `@PreUpdate`, `@PerRemove` 등으로 구현

```java
@Getter
@MappedSuperclass
@EntityListeners(AuditingEntityListener.class)
public class Timestamp {

  private LocalDateTime createdAt;

  private LocalDateTime modifiedAt;

  public void updateCreatedAt() {
    this.createdAt = LocalDateTime.now();
  }

  public void updateModifiedAt() {
    this.modifiedAt = LocalDateTime.now();
  }
}
​```
```java
// Entity 내 정의

  @PrePersist
  public void prePersist() {
    super.updateModifiedAt();
    super.updateCreatedAt();
  }

  @PreUpdate
  public void PreUpdate() {
    super.updateModifiedAt();
  }
```

</details>


----------------------











SpringData 쿼리와 QueryDSL

# SpringData 쿼리

## 기능

- SprintData Common 의 `CRUDRepository` + `PagingAndSortingRepository` 에서 쿼리기능을 제공

## 사용 방법

- 프로그래밍되어 제공되는 쿼리명 규칙
    - `리턴타입` {`접두어`}{`도입부`}By{`프로퍼티 표현식`}(`조건식`)[(And|Or){`프로퍼티 표현식`}(`조건식`)](OrderBy{`프로퍼티`}Asc|Desc) (`매개변수`...)

| 접두어 | Find, Get, Query, Count, ... |
| --- | --- |
| 도입부 | Distinct, First(N), Top(N) |
| 프로퍼티 표현식 | Person.Address.ZipCode => find(Person)ByAddress_ZipCode(...) |
| 조건식 | IgnoreCase, Between, LessThan, GreaterThan, Like, Contains, ... |
| 정렬 조건 | OrderBy{프로퍼티}Asc|Desc |
| 리턴 타입 | E, Optional<E>, List<E>, Page<E>, Slice<E>, Stream<E> |
| 매개변수 | Pageable, Sort |

- 쿼리 예제

```java
// 기본
List<User> findByNameAndPassword(String name, String password);

// distinct (중복제거)
List<User> findDistinctUserByNameOrPassword(String name, String password);
List<User> findUserDistinctByNameOrPassword(String name, String password);

// ignoring case (대소문자 무시)
List<User> findByNameIgnoreCase(String name);
List<User> findByNameAndPasswordAllIgnoreCase(String name, String password);

// 정렬
List<Person> findByNameOrderByNameAsc(String name);
List<Person> findByNameOrderByNameDesc(String name);

// 페이징
Page<User> findByName(String name, Pageable pageable);  // Page 는 카운트쿼리 수행됨
Slice<User> findByName(String name, Pageable pageable); // Slice 는 카운트쿼리 수행안됨
List<User> findByName(String name, Sort sort);
List<User> findByName(String name, Pageable pageable);

// 스트림 (stream 다쓴후 자원 해제 해줘야하므로 try with resource 사용추천)
Stream<User> readAllByNameNotNull();
```

# QueryDSL

## 기능

- QueryDSL의 `**Predicate**` 인터페이스로 조건문을 여러개를 구성하여 따로 관리할 수 있다.
    - `findOne(Predicate)`, `findAll(Predicate)` 주로 이 2개 메소드가 사용된다.
        - `findOne` = Optional<T> 리턴
        - `findAll` = List<T> | Page<T> | **Iterable<T>** | Slice<T> 리턴
- **Type Safe 기능**
    - 조건문 구성시에 사용되는 객체, 필드 조건이 실제 타입과 일치한지 체크해준다.

## 장점

1. 문자가 아닌 코드로 쿼리를 작성함으로써, 컴파일 시점에 문법 오류를 쉽게 확인할 수 있다.
2. 자동 완성 등 IDE의 도움을 받을 수 있다.
3. 동적인 쿼리 작성이 편리하다.
4. 쿼리 작성 시 제약 조건 등을 메서드 추출을 통해 재사용할 수 있다.

## 원리

- QueryDSL 의존성을 추가하면 SpringData에 의해 `**QueryDslPredicateExecutor**` 인터페이스가 추가된다.
    - `**QueryDslPredicateExecutor` 는** Repository가 QueryDsl 을 실행할 수 있는 인터페이스를 제공하는 역할을 합니다.

## 사용 방법
- Spring 2.X 버전 연동설정 (복잡함)
    ```java
    // build.gradle
    
    plugins {
        ...
        id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    }
    
    compileQuerydsl{
        options.annotationProcessorPath = configurations.querydsl
    }
    
    configurations {
        ...
        querydsl.extendsFrom compileClasspath
    }
    
    def querydslSrcDir = 'src/querydsl/generated'
    
    querydsl {
        library = "com.querydsl:querydsl-apt"
        jpa = true
        querydslSourcesDir = querydslSrcDir
    }
    
    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', querydslSrcDir]
            }
        }
    }
    
    project.afterEvaluate {
        project.tasks.compileQuerydsl.options.compilerArgs = [
                "-proc:only",
                "-processor", project.querydsl.processors() +
                        ',lombok.launch.AnnotationProcessorHider$AnnotationProcessor'
        ]
    }
    
    dependencies {
        implementation("com.querydsl:querydsl-jpa") // querydsl
        implementation("com.querydsl:querydsl-apt") // querydsl
        ...
    }
    ```

    - QueryDSL gradle 빌드 스크립트 원리
        - Gradle 빌드시에 QueryDSL은 프로젝트 내의 `**@Entity**` 어노테이션을 선언한 클래스를 탐색하고,  `**JPAAnnotationProcessor**`를 사용해 Q클래스를 생성
        - `**querydsl-apt**`가 `**@Entity**` 및 `**@Id**` 등의 매핑정보 Annotation을 알 수 있도록, `**javax.persistence**`과 `**javax.annotation**`을 annotationProcessor에 함께 추가
            - `**annotationProcessor**`는 Java 컴파일러 플러그인으로서, 컴파일 단계에서 어노테이션을 분석 및 처리함으로써 추가적인 파일을 생성합니다.
        - 개발 환경에서 생성된 Q클래스를 인지할 수 있도록 **/build/generated** 디렉토리를 프로젝트의 **sourceSet**에 추가합니다.


- Spring 3.X 버전 연동설정 (의존성으로 내장됨)
    ```java
    // build.gradle

    dependencies {
        ....

        // 9. QueryDSL 적용을 위한 의존성 (SpringBoot3.0 부터는 jakarta 사용해야함)
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    }
    ```

## 실습
- QuerydslPredicateExecutor<Channel> 의존성 추가
```java
public interface ChannelRepository extends JpaRepository<Channel, Long>, QuerydslPredicateExecutor<Channel> {

}
```

```java
@SpringBootTest
@Transactional
@Rollback(value = false)
class ChannelJpaRepositoryTest {

    @Autowired
    ChannelRepository channelRepository;

    @Autowired
    ChannelJpaRepository channelJpaRepository;

    @Test
    void queryDslTest() {
        // given
        var newChannel = Channel.builder().name("teasun").build();
        channelRepository.insertChannel(newChannel);

        Predicate predicate = QChannel
                                .channel
                                .name
                                .equalsIgnoreCase("TEASUN");

        // when
        Optional<Channel> optional = channelJpaRepository.findOne(predicate);

        // then
        assert optional.get().getName().equals(newChannel.getName());
    }
}
```

## 주의사항

기준 데이터
1. Mention 엔티티 생성
2. User - Mention - Thread 다대다 연관관계 설정
3. User, Mention 조건으로 Thread 목록 조회 쿼리수행

### Join 이 필요한 쿼리 일 경우 (불가능)

`**QuerydslPredicateExecutor**` 로는 Join 연산이 불가능하여 구현 불가능!

- 멤버 컬렉션까지만 조회 가능하며 이것을 **묵시적 조인(1 Depth 자동 조인)** 이라고 한다.
    - 즉, channel 의 threads 까지만 접근 가능한것이 묵시적 조인
- 반면에, Join 연산이 수행되는건 명시적 조인 이라고 한다. (2 Depth 이상 조인)

- 구현 테스트 코드
    ```java
    @Test
      void getMentionedThreadList() {
        // given
        var newUser = User.builder().username("new").password("1").build();
        var savedUser = userRepository.save(newUser);
        var newThread = Thread.builder().message("message").build();
        newThread.addMention(savedUser);
        threadService.insert(newThread);
    
        var newThread2 = Thread.builder().message("message2").build();
        newThread2.addMention(savedUser);
        threadService.insert(newThread2);
    
        // when
        // 모든 채널에서 내가 멘션된 쓰레드 목록 조회 기능
        var mentionedThreads = savedUser.getMentions().stream().map(Mention::getThread).toList();
    
        // then
        assert mentionedThreads.containsAll(List.of(newThread, newThread2));
      }
    ```
    
### Join 이 없는 대신 조건이 많은 쿼리 (가능)

Join 없이 조건이 많이 추가될 경우  `**QuerydslPredicateExecutor**` 활용 가능
    
- 다만 현업에서는 **JPAQueryFactory** 를 주로 씀
- 구현 테스트 코드 
    ```java
    @Service
    public class ThreadServiceImpl implements ThreadService {
    
        @Autowired
        ThreadRepository threadRepository;
    
        @Override
        public List<Thread> selectNotEmptyThreadList(Channel channel) {
            var thread = QThread.thread;
        
            // 메세지가 비어있지 않은 해당 채널의 쓰레드 목록
            var predicate = thread
                        .channel
                        .eq(channel)
                        .and(thread.message.isNotEmpty());
            var threads = threadRepository.findAll(predicate);
        
            return IteratorAdapter.asList(threads.iterator());
        }
    
        @Override
        public Thread insert(Thread thread) {
            return threadRepository.save(thread);
        }
    }
    ```
    
    ```java
    @Test
        void getNotEmptyThreadList() {
        // given
        var newChannel = Channel.builder().name("c1").type(Type.PUBLIC).build();
        var savedChannel = channelRepository.save(newChannel);
        var newThread = Thread.builder().message("message").build();
        newThread.setChannel(savedChannel);
        threadService.insert(newThread);
    
        var newThread2 = Thread.builder().message("").build();
        newThread2.setChannel(savedChannel);
        threadService.insert(newThread2);
    
        // when
        var notEmptyThreads = threadService.selectNotEmptyThreadList(savedChannel);
    
        // then 메세지가 비어있는 newThread2 는 조회되지 않는다.
        assert !notEmptyThreads.contains(newThread2);
        }
    ```



 ----------------


JPQL vs QueryDSL
# 1. JPQL

(Java Persistence Query Language)

Table 이 아닌 Entity(객체) 기준으로 작성하는 쿼리를 JPQL 이라고 하며

이를 사용할 수 있도록 `EntityManger` 또는 `@Query` 구현체를 통해 JPQL 쿼리를 사용할 수 있다.

## 1-1. EntityMananger.createQuery()

- 쿼리 문자열과 Entity 를 직접 넣어서 쿼리를 작성한다.
- setParameter 와 같이 key, value 문자열을 통해서 쿼리 파라미터를 매핑 
    ```java
    @Test
    	public void testEmCreateQuery() {
    		String qlString = "select u from User u " +
    							"where u.username = :username";
    
    		Member findUser = em.createQuery(qlString, User.class)
    				.setParameter("username", "teasun")
    				.getSingleResult();
    
    		assertThat(findUser.getUsername()).isEqualTo("teasun");
    	}
    ```

## 1-2. `@Qeury` **(repository interface)**

- 테이블명이 아니라 **Entity 명**
- 변수 바인딩
    1. `?변수순번`
        
        ```java
        public interface UserRepository extends JpaRepository<User, Long> {
        
          @Query("SELECT u, u.password AS customField FROM User u WHERE u.username = ?1")
          List<User> findByUsernameWithCustomField(String username, Sort sort);
        
          @Query("SELECT u FROM User u WHERE u.username = ?1")
          List<User> findByUsername(String username, Sort sort);
        }
        ```
        
    2. `:변수명` (추천)
        
        ```java
        public interface UserRepository extends JpaRepository<User, Long> {
        
          @Query("SELECT u, u.password AS customField FROM User u WHERE u.username = :username")
          List<User> findByUsernameWithCustomField(String username, Sort sort);
        
          @Query("SELECT u FROM User u WHERE u.username = :username")
          List<User> findByUsername(String username, Sort sort);
        }
        ```
        

# 2. QueryDSL (`JPAQueryFactory`)

- Entity 의 매핑정보를 활용하여 쿼리에 적합하도록 **쿼리 전용 클래스(Q클래스)**로 재구성해주는 기술
- 여기에 JPAQueryFactory 을 통한 **Q클래스**를 활용할 수 있는 기능들을 제공한다.
    > - JPAQueryFactory  
    > 재구성한 **Q클래스**를 통해 문자열이 아닌 객체 또는 함수로 쿼리를 작성하고 실행하게 해주는 기술

    ```java
    @PersistenceContext
    EntityManager em;
    
    public List<User> selectUserByUsernameAndPassword(String username, String password){
        JPAQueryFactory jqf = new JPAQueryFactory(em);
        QUser user = QUser.user;
    
        List<Person> userList = jpf
                    .selectFrom(user)
                    .where(person.username.eq(username)
                        .and(person.password.eq(password))
                    .fetch();
                                    
        return userList;
    }
    ```
-  JPAQueryFactory는 빈 등록 후 사용 권장
    ```java
    // configuration 패키지안에 추가
    @Configuration
    public class JPAConfiguration {

        @PersistenceContext
        private EntityManager entityManager;

        @Bean
        public JPAQueryFactory jpaQueryFactory() {
            return new JPAQueryFactory(entityManager);
        }
    }
    ```














-----------------

SpringData JPA 동적 쿼리

# @DynamicInsert
Insert 쿼리를 날릴 때 null 인 값은 제외하고 쿼리문 생성.

## 적용 방법
- Entity에 `@DynamicInsert` 추가
```java
@DynamicInsert
public class User {
    ...
}
```

- 테스트 코드
    ```java
    @Test
    void dynamicInsertTest() {
        // given
        var newUser = User.builder().username("user").build();

        // when
        userRepository.save(newUser);

        // then
        // 부분 생성 쿼리
    }
    ```
    - 적용 전
    ```sql
    Hibernate: 
        insert 
        into
            users
            (password, username, id) 
        values
            (?, ?, ?)  // 141ms 소요
    ```
    - 적용 후
    ```sql
    Hibernate: 
        insert 
        into
            users
            (username, id) 
        values
            (?, ?)  // 133ms 소요
    ```

# @DynamicUpdate
Update 쿼리를 날릴 때 null인 값은 제외하고 쿼리문 생성.
## 적용 방법
- Entity에 `@DynamicUpdate` 추가
```java
@DynamicUpdate
public class User {
    ...
}
```
​
- 테스트 코드
    ```java
    @Test
    void dynamicUpdateTest() {
        // given
        var newUser = User.builder().username("user").password("password").build();
        userRepository.save(newUser);

        // when
        newUser.updatePassword("new password");
        userRepository.save(newUser);

        // then
        // 부분 수정 쿼리
    }
    ```
    - 적용 전
    ```sql
    Hibernate: 
        update
            users 
        set
            password=?,
            username=? 
        where
            id=?  // 149ms
    ```
    - 적용 후
    ```sql
    Hibernate: 
        update
            users 
        set
            password=? 
        where
            id=?  // 134ms
    ```








